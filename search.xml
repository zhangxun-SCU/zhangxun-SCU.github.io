<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>page</title>
      <link href="/archives/140ab620.html"/>
      <url>/archives/140ab620.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用标签</title>
      <link href="/archives/16a89419.html"/>
      <url>/archives/16a89419.html</url>
      
        <content type="html"><![CDATA[<h1 id="文档结构"><a class="markdownIt-Anchor" href="#文档结构"></a> 文档结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;!DOCTYPE&gt;位于文档的最前面，用于向浏览器说明当前文档使用的是哪一种HTML或XHTML规范，只有在文档开头含有&lt;!DOCTYPE&gt;声明，浏览器才能正确的有效的解析该文档。  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页名字<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--标题标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>一个网页只能由一个标题标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--段落标签：，一般段落标签中的文本会根据浏览器窗口大小自动换行--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--水平线标签：表示一条水平线--&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span>  </span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--水平线标签：表示一条水平线--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span>&gt;</span>文本样式标签，不常用，使用CSS设置样式<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--文本格式化标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--粗体显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--斜体显示--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加下划线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加删除线--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span><span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--文本语义标签--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">time</span>&gt;</span>用于定义时间和日期，time标签不会在浏览器中显示任何特殊效果，但该元素以机器可读的方式对日期和时间进行编码，可以增强文本的语义，方便机器解析<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mark</span>&gt;</span>突出显示其包裹的内容<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cite</span>&gt;</span>创建一个引用，使用该标签后，内容在页面会以斜体的形式显示<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"> <span class="comment">&lt;!--特殊字符: (https://www.cnblogs.com/limengjie0104/p/9077352.html)--&gt;</span>  </span><br><span class="line">        </span><br><span class="line"> <span class="comment">&lt;!--图像标签  src属性，属性值为URL，图像的路径  alt属性，图像不能显示时的替换文本  title属性，鼠标悬停时显示的内容--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">alt</span>=<span class="string">&#x27;&#x27;</span> /&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--超链接--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">target</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line">            href:网页路径，单击后会跳转，如果是锚点连接（页面内跳转），那么href属性为目标标签的id值</span><br><span class="line">            target:如果是_self，直接跳转，如果是_blank，打开新的标签页跳转</span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>自定义列表的主题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自定义列表的列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--表格--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头标签<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        单元格标签</span><br><span class="line">                        colspan:跨列合并单元格</span><br><span class="line">                        rowspan:跨行合并单元格</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--表单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line">            action:提交地址</span><br><span class="line">            method:提交方式 get/post</span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line">            标题标签</span><br><span class="line">                for是关联表单中的id值</span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;&#x27;</span>/&gt;</span></span><br><span class="line">            type:</span><br><span class="line">            text 输入框</span><br><span class="line">            password 密码框</span><br><span class="line">            radio 单选按钮， name属性是分组，即将多个radio设置相同的name，实现单选， checked是默认选择</span><br><span class="line">            checkbox 复选框， ckecked默认选中， </span><br><span class="line">            button 普通按钮</span><br><span class="line">            submit 提交按钮</span><br><span class="line">            reset 重置按钮</span><br><span class="line">            email 邮箱类型</span><br><span class="line">            url 网址</span><br><span class="line">            datetime 本地时间类型</span><br><span class="line">            month 月类型</span><br><span class="line">            date 日类型</span><br><span class="line">            week 周类型</span><br><span class="line">            color 颜色</span><br><span class="line">            range 滑块</span><br><span class="line">            submit 提交</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                下拉菜单， selected默认选中</span><br><span class="line">                <span class="tag">&lt;<span class="name">optgroup</span>&gt;</span>下拉组<span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>下拉项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--H5--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span>头部标签<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航标签<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            区域标签</span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arcticle</span>&gt;</span>文章标签<span class="tag">&lt;/<span class="name">arcticle</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span>底部标签<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!--音频标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">controls</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">loop</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">autoplay</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line">            source:多个文件引入标签</span><br><span class="line">            src:音频文件路径</span><br><span class="line">            loop:循环播放</span><br><span class="line">            autoplay:自动播放</span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--视频标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line">            属性与上面的音频标签几乎相同</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pearson 相关系数</title>
      <link href="/archives/140ab62c.html"/>
      <url>/archives/140ab62c.html</url>
      
        <content type="html"><![CDATA[<p>Pearson相关系数是衡量两个向量相似度的一种方法。</p><p>Pearson相关系数等于协方差除以两个向量的标准差（协方差：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>v</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">cov(X, Y) = \frac{\sum_{i=1}^n(x_i - \overline{x})(y_i - \overline{y})}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.405007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.060007em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5350070000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>），由此我们可以求得Pearson相关系数的公式：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>e</mi><mi>a</mi><mi>r</mi><mi>s</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>X</mi><mo separator="true">,</mo><mi>Y</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo></mrow><mrow><msqrt><mrow><mo>∑</mo><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mrow></msqrt><mo>∗</mo><msqrt><mrow><mo>∑</mo><mrow><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow></mrow></msqrt></mrow></mfrac></mrow><annotation encoding="application/x-tex">Pearson(X, Y) = \frac{\sum_{i=1}^n(x_i - \overline{x})(y_i - \overline{y})}{\sqrt{\sum{(x_i - \overline{x})^2}} * \sqrt{\sum{(y_i - \overline{y})^2}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">e</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.8896069999999998em;vertical-align:-0.8295999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.060007em;"><span style="top:-2.4641659999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0369057142857143em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0089057142857145em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4196657142857143em;"><span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0369057142857143em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace mtight" style="margin-right:0.19516666666666668em;"></span><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0089057142857145em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4196657142857143em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5350070000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mop op-symbol small-op mtight" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.1785614285714283em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.32143857142857146em;"><span></span></span></span></span></span></span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord overline mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6755600000000002em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.57756em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line mtight" style="border-bottom-width:0.049em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8295999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>由协方差的公式可以看出当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63056em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>时协方差变大，反之协方差变小，所以协方差一定程度上反应了两个向量的变化趋势，但是当仅仅只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">x_i - \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.63056em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">y_i - \overline{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>很大时，协方差也可能会很大，但显然此时两个向量的变化趋势并不是很相似，由此再看pearson相关系数。（我有两种理解pearson相关系数的方式）</p><p>pearson相关系数就是协方差再除以两个向量的标准差，可证这是一个-1到1之间的值，运用刚刚理解协方差的方式来看：当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.63056em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>大于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>时pearson相关系数变大，反之pearson相关系数变小，且当仅仅只有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">x_i - \overline{x}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.63056em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">y_i - \overline{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>很大时，因为pearson相关系数除以了两个向量的标准差，此时pearson相关系数也会相对变小一些，所以pearson相关系数比协方差更能表示两个向量（序列）的变化趋势。</p><p>还有一种对于pearson相关系数的理解方式是空间上两个向量的夹角，先看看我们熟知的直角坐标系上两个向量的夹角如何计算，假设有两向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>1</mn></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><mi mathvariant="normal">两</mi><mi mathvariant="normal">向</mi><mi mathvariant="normal">量</mi><mi mathvariant="normal">夹</mi><mi mathvariant="normal">角</mi><mi mathvariant="normal">为</mi><mi>θ</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">则</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>θ</mi><mo>=</mo><mfrac><mrow><msub><mi>x</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><msub><mi>y</mi><mn>1</mn></msub><mo>∗</mo><msub><mi>y</mi><mn>2</mn></msub></mrow><mrow><msqrt><mrow><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>y</mi><mn>1</mn><mn>2</mn></msubsup></mrow></msqrt><msqrt><mrow><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>y</mi><mn>2</mn><mn>2</mn></msubsup></mrow></msqrt></mrow></mfrac></mrow><annotation encoding="application/x-tex">a = [x_1, y_1], b=[x_2, y_2], 两向量夹角为\theta，则cos\theta = \frac{x_1*x_2 + y_1*y_2}{\sqrt{x_1^2 + y_1^2}\sqrt{x_2^2 + y_2^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">向</span><span class="mord cjk_fallback">量</span><span class="mord cjk_fallback">夹</span><span class="mord cjk_fallback">角</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">则</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6840389999999998em;vertical-align:-0.8295999999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.854439em;"><span style="top:-2.4664025em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0337107142857143em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142857em;"><span style="top:-2.188485714285714em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142857em;"><span style="top:-2.188485714285714em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0057107142857147em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42286071428571426em;"><span></span></span></span></span></span><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0337107142857143em;"><span class="svg-align" style="top:-3.428571428571429em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="mord mtight" style="padding-left:1.19em;"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142857em;"><span style="top:-2.188485714285714em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051142857142857em;"><span style="top:-2.188485714285714em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.31151428571428574em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.0057107142857147em;"><span class="pstrut" style="height:3.428571428571429em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.5428571428571431em;"><svg width='400em' height='1.5428571428571431em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.42286071428571426em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">∗</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8295999999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，再回到pearson相关系数的公式，假设<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>x</mi></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>x</mi><mn>1</mn></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><msub><mi>δ</mi><mi>y</mi></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">\delta_x = [x_1-\overline{x}, x_2-\overline{x}, ...x_i - \overline{x}, ...], \delta_y = [y_1 - \overline{y}, y_2 - \overline{y}, ...y_i - \overline{y}, ...]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mclose">]</span></span></span></span>，pearson相关系数就是向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">\delta_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">\delta_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的夹角余弦，pearson相关系数越大，也就是向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">\delta_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>δ</mi><mi>y</mi></msub></mrow><annotation encoding="application/x-tex">\delta_y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.980548em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>的夹角越小，两向量方向越相似，而这两个向量是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i,y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>相对于其平均值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo separator="true">,</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{x},\overline{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.63056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.55056em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>的偏移程度，也就可以表示两向量变化趋势也接近。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 人工智能 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常见、常用的函数</title>
      <link href="/archives/140ab621.html"/>
      <url>/archives/140ab621.html</url>
      
        <content type="html"><![CDATA[<h1 id="字符串str"><a class="markdownIt-Anchor" href="#字符串str"></a> 字符串str</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.title()  <span class="comment"># 是字符串以首字母大写的形式输出</span></span><br><span class="line"><span class="built_in">str</span>.uuper()  <span class="comment"># 字符串以全大写形式输出</span></span><br><span class="line"><span class="built_in">str</span>.lower()  <span class="comment"># 字符串以全小写形式输出</span></span><br><span class="line"><span class="built_in">str</span>.capitalize()  <span class="comment"># 获得首字母大写的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.rstrip()  <span class="comment"># 去除字符串末尾空白</span></span><br><span class="line"><span class="built_in">str</span>.lstrip()  <span class="comment"># 去除字符串开头空白</span></span><br><span class="line"><span class="built_in">str</span>.strip()  <span class="comment"># 去除字符串两端空白  对于这三个函数可以向他们传递参数，来控制它们删除什么，如rstrip(‘\n’)，就会删除字符串末尾（右端）的换行符(‘\n’)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.count()  <span class="comment"># 与列表中使用类似，查出某元素在字符串出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.startswith()  <span class="comment"># 字符串是否以..开头</span></span><br><span class="line"><span class="built_in">str</span>.endswith()  <span class="comment"># 是否以..结尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.split(ch)  <span class="comment"># 此方法将字符串以ch为分隔符分开，返回剩下的子串的列表，如将一段英语用空格为分隔符分开就会得到一个存有所有单词的列表</span></span><br><span class="line"><span class="built_in">str</span>.join(<span class="built_in">list</span>)  <span class="comment"># 将list以str为间隔合并为一个长字符串</span></span><br><span class="line"><span class="built_in">str</span>.replace(old_str, new_str, num)  <span class="comment"># (旧子串，新子串，替换次数（不写代表全部替换）)：用于子串替换</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.center(<span class="number">50</span>, <span class="string">&#x27;*&#x27;</span>)  <span class="comment"># 将字符串以指定的宽度居中并在两侧填充指定的字符</span></span><br><span class="line"><span class="built_in">str</span>.rjust(<span class="number">50</span>, <span class="string">&#x27; &#x27;</span>)  <span class="comment"># 将字符串以指定的宽度靠右放置左侧填充指定的字符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.isdigit()  <span class="comment"># 检查字符串是否由数字构成</span></span><br><span class="line"><span class="built_in">str</span>.isalpha()  <span class="comment"># 检查字符串是否以字母构成</span></span><br><span class="line"><span class="built_in">str</span>.isalnum()  <span class="comment"># 检查字符串是否以数字和字母构成</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>.find()  <span class="comment"># #查找子串，字符串.find（子串，起始位置，结束位置），找到就返回子串起始位置，未找到返回-1</span></span><br><span class="line"><span class="built_in">str</span>.rfind()  <span class="comment"># 同上，单从后/有向前/左找</span></span><br><span class="line"><span class="built_in">str</span>.index()  <span class="comment"># 也是找子串，用法与find类似，没找到会报错</span></span><br><span class="line"><span class="built_in">str</span>.rindex()  <span class="comment"># 同上，单从后/有向前/左找</span></span><br></pre></td></tr></table></figure><h1 id="字典dict"><a class="markdownIt-Anchor" href="#字典dict"></a> 字典dict</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span>.get()  <span class="comment"># 访问字典的键值对（并且当键不存在时也不会出错，而是返回一个特定的值(默认为none，可以传参数指定这个值)</span></span><br><span class="line"><span class="built_in">dict</span>.values()  <span class="comment"># 访问字典中所有的值，返回一个列表。</span></span><br><span class="line"><span class="built_in">dict</span>.keys()  <span class="comment"># 访问字典中所有的键，并返回一个列表。</span></span><br><span class="line"><span class="built_in">dict</span>.items()  <span class="comment"># 访问所有的键值对。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[key]  <span class="comment"># 删除某键值对。</span></span><br></pre></td></tr></table></figure><h1 id="集合set"><a class="markdownIt-Anchor" href="#集合set"></a> 集合set</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span>()  <span class="comment"># 集合，集合里所有的元素时不重复的，所以可以使用set来去掉重复的元素，可以用花括号直接创建集合（与字典区分开），内部的元素之间用逗号隔开。</span></span><br><span class="line"></span><br><span class="line">a.union(b) <span class="comment"># a与b的并集</span></span><br><span class="line"></span><br><span class="line">a.intersection(b)<span class="comment"># a与b的交集</span></span><br><span class="line"></span><br><span class="line">a.difference(b) <span class="comment"># 存在于a但不存在于b</span></span><br><span class="line"></span><br><span class="line">a.symmetric_difference(b) <span class="comment"># 只在a或只在b中的元素</span></span><br><span class="line"></span><br><span class="line">a.issubset(b) <span class="comment"># 如果a中的元素全部属于b，则为True</span></span><br><span class="line"></span><br><span class="line">a.issuperset(b) <span class="comment"># 如果b中的元素全部属于a，则为True</span></span><br><span class="line"></span><br><span class="line">a.isdisjoint(b) <span class="comment"># 如果a、b乌共同元素，则为True</span></span><br></pre></td></tr></table></figure><h1 id="列表list"><a class="markdownIt-Anchor" href="#列表list"></a> 列表list</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>()  <span class="comment"># 将range()的结果直接作为list()的参数，list可以直接将range转化为一个数字列表。将其他数据转换为列表</span></span><br><span class="line"><span class="built_in">tuple</span>()  <span class="comment">#  将列表转换为元组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.append()  <span class="comment"># 在列表末尾增加元素。</span></span><br><span class="line"><span class="built_in">list</span>.insert(index, a)  <span class="comment"># 在列表的index处插入元素a</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[index]  <span class="comment"># 删除index处的元素</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[start: end]  <span class="comment"># 删除start到end的元素</span></span><br><span class="line"><span class="built_in">list</span>.pop()  <span class="comment"># 弹出最后一个元素，即删除并返回</span></span><br><span class="line"><span class="built_in">list</span>.pop(index)  <span class="comment"># 弹出index出的元素</span></span><br><span class="line"><span class="built_in">list</span>.remove(item)  <span class="comment">#根据值删除元素，但remove一次只会删除一个值，如果某个值出现了多次，也只会删除遇到的第一个。与pop相同，.remove()也会返回它删除的那个值，如果没有那个值会发生异常</span></span><br><span class="line"><span class="built_in">list</span>.clear()  <span class="comment"># 删除所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">range</span>(start, end, step)  <span class="comment"># 生成一系列数，range(start, end)生成start到end-1的一系列数，还可以传递第三个参数以规定步长，如果将步长设置为负数，可以获得从大到小的一组数据。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.count(item)  <span class="comment"># 返回item在list中出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.index(item)  <span class="comment"># 返回第一个与item相同的元素的索引，如果没有找到会发生异常</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">enumerate</span>()  <span class="comment"># 遍历列表，同时获得元素索引和值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>  <span class="comment"># 判断某元素是否在列表中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>.extend(list1)  <span class="comment"># 合并两个列表/将list1加入list</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">zip</span>(<span class="built_in">list</span>, <span class="built_in">list</span>)  <span class="comment"># 将多个列表组合为一个可迭代对象，有点类似于将每个列表对应位置的元素合为一个小列表（事实上，zip是将多个列表元组或其他序列组合为一个元组列表）</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="排序"><a class="markdownIt-Anchor" href="#排序"></a> 排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.sort()  <span class="comment"># 将列表中的值排序，会改变列表顺序，无法恢复。可以向sort()传参：reverse = True 来实现反向的排序。通过key可以设置排序规则</span></span><br><span class="line"><span class="built_in">sorted</span>()  <span class="comment"># 于上面类似，但不改变源列表，而是返回新的排好序的列表，也可以传参数设置排序方向和规则</span></span><br><span class="line">.reverse()  <span class="comment"># 将列表元素倒过来，会永久的改变列表顺序，不过再调用一次此函数就可以恢复了。</span></span><br></pre></td></tr></table></figure><h1 id="随机"><a class="markdownIt-Anchor" href="#随机"></a> 随机</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(a, b)  <span class="comment"># 生成a到b的一个随机数</span></span><br><span class="line">random.random()  <span class="comment"># 返回0.0到1.0之间的一个随机浮点数，不包括1.0</span></span><br><span class="line">random.uniform()  <span class="comment"># 同样返回一个随机浮点数，但可以指定范围</span></span><br><span class="line">random.randrange()  <span class="comment"># 使用类似range，有起始值、终止值、步长，但它不会返回一个列表，而是返回其中任意一个值</span></span><br><span class="line">random.seed()  <span class="comment"># 指定随机数种子（可以每次产生相同的随机数序列）</span></span><br><span class="line">random.shuffle(<span class="built_in">list</span>)  <span class="comment"># 将序列中的所有元素随机排序</span></span><br></pre></td></tr></table></figure><h1 id="文件"><a class="markdownIt-Anchor" href="#文件"></a> 文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>()  <span class="comment"># 打开文件，使用with open可以避免忘记关闭文件的问题</span></span><br><span class="line">fp.close()  <span class="comment"># 关闭文件</span></span><br><span class="line">fp.readlines()  <span class="comment"># 读取文件每一行，并返回一个列表</span></span><br><span class="line">fp.write()  <span class="comment"># 写入文件，但write不会再文本末尾加换行符，如果需要要自己加</span></span><br></pre></td></tr></table></figure><h1 id="对象"><a class="markdownIt-Anchor" href="#对象"></a> 对象</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hasattr</span>(obj, name)  <span class="comment"># 判断name是否是obj对象的属性</span></span><br></pre></td></tr></table></figure><h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 星号表达式 一是用于参数传递时传递可变数量的参数 二是用于unpack可迭代的变量，如向JS一样将数据从序列中取出来</span></span><br><span class="line">a, *b, c = <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断数据类型</span></span><br><span class="line"><span class="built_in">type</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断数据id(类似地址)</span></span><br><span class="line"><span class="built_in">id</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大最小值以及求和，求序列长度</span></span><br><span class="line"><span class="built_in">max</span>()</span><br><span class="line"><span class="built_in">min</span>()</span><br><span class="line"><span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">len</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据可视化之matplotlib.pyplot</title>
      <link href="/archives/f70d7eb4.html"/>
      <url>/archives/f70d7eb4.html</url>
      
        <content type="html"><![CDATA[<h1 align='center'>数据可视化之matplotlib.pyplot</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>matplotlib是python中常用的绘图库，pyplot是matplotlib的子库，提供了简洁好用的API。</p><h2 id="绘图前"><a class="markdownIt-Anchor" href="#绘图前"></a> 绘图前</h2><p>在matplotlib中，我们绘制的图像都放在一个Figure对象里，而画的每个图像是一个子图subplot，所以画图前要想创建一个Figure对象，并至少添加一个子图（使用add_subplot来添加子图），当然也可以创建多个子图，如下例（记住使用pycharm时要调用plt.show()使图像显示出来）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 添加Figure对象</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line"><span class="comment"># 添加子图，要添加2*2个子图，ax1是第一个（注意编号从1开始）</span></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202209282229388.png" alt="image-20220928222923359" /></p><p>很多时候我会直接使用subplots直接创建Figure对象和subplot子图，同样可以创建多个子图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 此时axes是包含子图对象的numpy数组</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202209282229342.png" alt="image-20220928222941304" /></p><p>还可以使用sharex和sharey参数是各子图使用相同的XY轴，参数值： bool or {‘none’, ‘all’, ‘row’, ‘col’}, default: False</p><h2 id="绘图"><a class="markdownIt-Anchor" href="#绘图"></a> 绘图</h2><h3 id="网格"><a class="markdownIt-Anchor" href="#网格"></a> 网格</h3><p>使用子图ax的grid方法来决定是否在子图中开启网格线，<code>ax.grid(color='r', ls='-', lw=2)</code>，参数color是网格线的颜色，ls是网格线的样式，lw是网格线宽度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.grid(color=<span class="string">&#x27;r&#x27;</span>, ls=<span class="string">&#x27;-&#x27;</span>, lw=<span class="number">1</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210032243028.png" alt="image-20221003224357994" /></p><h3 id="坐标轴"><a class="markdownIt-Anchor" href="#坐标轴"></a> 坐标轴</h3><ul><li><code>ax.set_title()</code>：设置子图标题</li><li><code>ax.set_xlabel()</code>：设置x轴标签</li><li><code>ax.set_ylabel()</code>：设置y轴标签</li><li><code>ax.set_xlim()</code>：设置x轴范围</li><li><code>ax.set_ylim()</code>：设置y轴范围</li><li><code>ax.set_xticklabels()</code>：设置x轴刻度标签</li><li><code>ax.set_yticklabels()</code>：设置y轴刻度标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.set_title(<span class="string">&quot;This is a test.&quot;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;x_test&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;y_test&quot;</span>)</span><br><span class="line">ax.set_ylim(<span class="number">0</span>, <span class="number">10000</span>)</span><br><span class="line">ax.set_xticklabels([<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;test4&#x27;</span>, <span class="string">&#x27;test5&#x27;</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210032252619.png" alt="image-20221003225258584" /></p><h2 id="图像"><a class="markdownIt-Anchor" href="#图像"></a> 图像</h2><h3 id="折线图"><a class="markdownIt-Anchor" href="#折线图"></a> 折线图</h3><p>绘制折线图使用plot函数，第一个参数为x轴，第二个参数为y轴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.exp(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0.1</span>)</span><br><span class="line">y = f(x)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots()</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202209282254979.png" alt="image-20220928225412947" /></p><h3 id="散点图"><a class="markdownIt-Anchor" href="#散点图"></a> 散点图</h3><p>使用scatter绘制散点图，第一个参数为x，第二个参数为y</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">y = [np.random.randint(<span class="number">0</span>, <span class="number">10</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="built_in">print</span>(x, y)</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202209282300858.png" alt="image-20220928230052828" /></p><h3 id="柱状图"><a class="markdownIt-Anchor" href="#柱状图"></a> 柱状图</h3><p>使用<code>ax.bar(x, height, width, bottom, align)</code>函数画柱状图</p><p>关于参数：（有颜色color等通用参数就不再列举）</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">x</td><td style="text-align:left">柱体的x轴位置，默认x取值是每个柱状图所在的中的位置（可以通过调整每个柱状图的值在一个子图内画多个柱状图）</td></tr><tr><td style="text-align:left">height</td><td style="text-align:left">height的数据对应的是每个柱体的高度</td></tr><tr><td style="text-align:left">width</td><td style="text-align:left">主题宽度，默认0.8</td></tr><tr><td style="text-align:left">bottom</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">align</td><td style="text-align:left">可以为“center” 活“edge”，表示x轴标签于主题的起始位置</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">langs = [<span class="string">&#x27;baishi&#x27;</span>, <span class="string">&#x27;coca&#x27;</span>]</span><br><span class="line">data = [<span class="number">100</span>, <span class="number">50</span>]</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.bar(langs, data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210022246728.png" alt="image-20221002224643687" /></p><h3 id="直方图"><a class="markdownIt-Anchor" href="#直方图"></a> 直方图</h3><p>使用<code>ax.hist()</code>函数画柱状图，第一个参数为带分组的数据，第二个参数为类别（？详细的看下面的例子，分数为0-25为一段，25-50为一段，50-75为一段，75-100为一段）</p><p>关于参数:</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">x</td><td style="text-align:left">待处理的数据（在下面的例子中就是分数scores）</td></tr><tr><td style="text-align:left">bins</td><td style="text-align:left">表示直方图的间隔边缘（如下的0-25，25-50，……）</td></tr><tr><td style="text-align:left">range</td><td style="text-align:left">指定全局间隔的上限于下限值（min, max）</td></tr><tr><td style="text-align:left">density</td><td style="text-align:left">如果为 True，返回概率密度直方图；默认为 False，返回相应区间元素的个数的直方图</td></tr><tr><td style="text-align:left">histtype</td><td style="text-align:left">要绘制的直方图类型，默认值为“bar”，可选值有 barstacked(堆叠条形图)、step(未填充的阶梯图)、stepfilled(已填充的阶梯图)</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">scores = [<span class="number">0</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]</span><br><span class="line">data = [np.random.randint(<span class="number">0</span>, <span class="number">100</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">ax.hist(data, scores)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210022257502.png" alt="image-20221002225732467" /></p><h3 id="饼状图"><a class="markdownIt-Anchor" href="#饼状图"></a> 饼状图</h3><p>使用<code>ax.pie()</code>绘制饼状图</p><p>参数设置：</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:center">每个扇形对应的数据</td></tr><tr><td style="text-align:center">labels</td><td style="text-align:center">给每个扇形一个标签</td></tr><tr><td style="text-align:center">color</td><td style="text-align:center">每个扇形的颜色，默认颜色会自动变化</td></tr><tr><td style="text-align:center">autopct</td><td style="text-align:center">使用百分比的格式设置每个扇形的标签，并将其放置在扇形区内</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">langs = [<span class="string">&#x27;baishi&#x27;</span>, <span class="string">&#x27;coca&#x27;</span>]</span><br><span class="line">data = [<span class="number">75</span>, <span class="number">25</span>]</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.pie(data, labels=langs, autopct=<span class="string">&#x27;%1.2f%%&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210022302466.png" alt="image-20221002230253433" /></p><h3 id="等高线图"><a class="markdownIt-Anchor" href="#等高线图"></a> 等高线图</h3><p>等高线图的本质是使用二维平面上绘制三维数据，Z使用等高线来表示</p><p>绘制等高线需要使用两个函数<code>ax.contour()</code>与<code>ax.contourf()</code>，前者为绘制等高线，后者为填充等高线</p><p>参数：（这两个函数都需要三个参数）</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>矩阵数据，所有点的横坐标</td></tr><tr><td>y</td><td>矩阵数据，所有点的纵左边</td></tr><tr><td>z</td><td>高度数据</td></tr></tbody></table><p>**注意：所有点指的是画图的所有点，想要手动得到是很难的，我们使用<code>np.meshgrid()</code>来获得(这个函数接收x轴坐标与y轴坐标，返回这两个坐标组成的所有点的横坐标与纵坐标，实际上就是将x沿y方向复制n(y)次，将y沿x方向复制n(x)次)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">y = np.linspace(-<span class="number">10</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>)</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.contourf(X, Y, Z)</span><br><span class="line">ax.contour(X, Y, Z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202210042337535.png" alt="image-20221004233755500" /></p><blockquote><p>参考资料：</p><p><a href="https://www.runoob.com/matplotlib/matplotlib-scatter.html">Matplotlib 散点图 | 菜鸟教程 (runoob.com)</a></p><p>[《利用python进行数据分析》 第09章 绘图和可视化]</p><p><a href="http://c.biancheng.net/matplotlib/9285.html">Matplotlib折线图（绘图实例+代码详解） (biancheng.net)</a></p><p><a href="https://matplotlib.org/stable/tutorials/introductory/pyplot.html#">Pyplot tutorial — Matplotlib 3.6.0 documentation</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象进阶笔记</title>
      <link href="/archives/140ab620.html"/>
      <url>/archives/140ab620.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java面向对象进阶笔记</p><p><a href="https://github.com/zhangxun-SCU/java-practice">练习代码</a></p></blockquote><h1 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h1><h2 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范"></a> 命名规范</h2><p>数字/字母/下划线/小圆点</p><blockquote><p>com.公司名.项目名.业务模块名</p></blockquote><h2 id="常用包"><a class="markdownIt-Anchor" href="#常用包"></a> 常用包</h2><ul><li><code>java.long</code>:基本包，默认引入</li><li><code>java.util</code>:系统提供的工具包</li><li><code>java.net</code>:网络包，网络开发</li><li><code>java.awt</code>:界面开发，GUI</li></ul><h2 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符"></a> 访问修饰符</h2><ul><li>public：对外公开</li><li>protected：对子类和同一个包的类公开</li><li>默认：同一个包的类公开</li><li>private：只有类本身可访问</li></ul><h1 id="面向对象进阶"><a class="markdownIt-Anchor" href="#面向对象进阶"></a> 面向对象进阶</h1><h2 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h2><p>解决代码复用，在idea里ctrl+h看类的继承关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class 子类 extends 父类&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>继承时<strong>子类继承了所有的属性和方法</strong>，但是私有属性和方法不能直接在子类中访问。</li><li>子类必须调用父类的构造器完成父类的初始化，</li><li>创建子类对象时，不管使用子类的那个构造器，默认情况总会调用父类的无参构造器，如果父类没有无参构造，则必须在子类里调用<code>super</code>去指定使用父类的那个构造器初始化父类，<strong>先执行父类构造器，再子类</strong>。</li><li>如果想指明调用父类的那个构造器，就<code>super(参数列表)</code></li><li><code>super</code>放在子类构造器第一行（<strong>故使用了super就不能使用this了</strong>）</li><li><strong>Java中的继承是单继承，子类只能继承一个父类</strong>。</li></ul><blockquote><p><strong>Java所有类都是Object的子类</strong>（类似[[JS]]原型？）</p><p>父类构造器的调用不限于父类，将一直往上追溯到Object类（顶级父类）</p><p>那么在访问对象信息时要按查找关系来返回信息，先看子类是否有这个属性，没有就找父类，没有继续找上级父类，……，直到Object，没有就报错。（或者说应该[[JS]]里的原型链就出自这里？）参考：[[继承内存图示]]</p></blockquote><h2 id="super"><a class="markdownIt-Anchor" href="#super"></a> super</h2><ul><li>可访问父类的属性/方法，但不能访问私有的属性/方法，<code>super.name</code></li><li>也就是说super也遵守访问权限的限制</li><li>也能访问父类的构造器，前面用法讲过了，放在子类构造器第一行</li></ul><p>（<strong>super于this在某些方面似乎类似</strong>？？）</p><h2 id="方法重写"><a class="markdownIt-Anchor" href="#方法重写"></a> 方法重写</h2><ul><li>子类的方法参数方法名称要与父类一样</li><li>子类方法的返回类型和父类方法返回类型一样，或者是父类返回类型的子类，比如父类返回类型为Object，子类方法返回类型为String</li><li>子类方法不能缩小父类方法的访问权限</li></ul><p><strong>重载是在同一个类，重写是在父类子类</strong>。</p><h2 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h2><p>方法和对象具有多种形态</p><blockquote><p>对象的多态：</p><ul><li><p>一个对象的编译类型和运行类型可以不一致，编译类型在定义对象时确定，不能改变，运行类型是可以变化的（<strong>编译类型看定义是<code>=</code>的左边，运行类型看右边</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Animal 是 Dog 的父类，Animal是编译类型Dog是运行类型</span></span><br></pre></td></tr></table></figure></li><li><p>多态的前提是两个对象存在继承关系</p></li><li><p>多态的<strong>向上转型</strong>：父类的引用指向子类的对象，此时对象<strong>可以调用父类的所有成员（须遵守访问权限），但不能调用子类特有的成员</strong>（能调用那些成员，是由编译类型决定的，），但调用方法时也是先从运行类型/子类开始查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); </span><br></pre></td></tr></table></figure></li><li><p>多态的<strong>向下转型</strong>：<strong>只能强转父类的引用，不能强装父类的对象</strong>；<br />要求父类的引用必须指向的是当前目标类型的对象（也就是说父类引用必须原本就指向你要的目标类型，见下例animal本身就指向Dog对象）；<br /><strong>可以调用子类类型中的所有成员</strong>（须遵守访问权限）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog)animal;</span><br></pre></td></tr></table></figure></li><li><p>属性：<strong>属性没有重写之说，属性的值看编译类型</strong>。见下例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">Base</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Base</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">tmp.num <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p><strong>注意多态参数（实参类型可以是形参类型的子类）和多态数组（数组元素类型也可以是数组类型的子类）的使用</strong>。</p><h2 id="instanceof"><a class="markdownIt-Anchor" href="#instanceof"></a> <code>instanceof</code></h2><p>判断对象的运行类型是否为某类型或某类型的子类型</p><h2 id="动态绑定机制"><a class="markdownIt-Anchor" href="#动态绑定机制"></a> 动态绑定机制</h2><p><strong>当调用对象方法的时候，该方法与该对象的内存地址/运行类型绑定，当调用对象属性的时候，没有动态绑定机制，哪里声明那里使用</strong>。</p><h2 id="object"><a class="markdownIt-Anchor" href="#object"></a> Object</h2><p>Object类是所有类的基类/超类，所有对象包括数字都实现了Object的方法</p><ul><li><p><code>equals</code>方法</p><blockquote><p>与<code>==</code>的区别，<code>==</code>判断基本类型时就判断他们值是否相等，判断引用类型时就判断地址是否相等</p><p>而显然<code>equals</code>只判断引用类型，默认是判断地址相同，但子类一般重写这个方法，用于判断内容是否相同</p></blockquote></li><li><p><code>hashcode</code>方法：返回对象的hash码值</p><blockquote><p><code>hashcode</code>是为了提高具有哈希结构的容器的效率</p><p>两个引用指向同一个对象，<code>hashcode</code>一定相同，指向不同对象<code>hashcode</code>一定不同。（<code>hashcode</code>主要根据地址号来的，但不完全等价于地址）</p></blockquote></li><li><p><code>toString</code>方法：返回该对象的字符串标识</p><blockquote><p>默认返回<code>全类名@hashco</code>（包名+类名+<code>hashcode</code>）,但往往重写为输出对象的一些属性，见下例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">             <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">             <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">             <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">             <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>当输出一个对象时，<code>toString</code>方法默认调用</p></blockquote></li><li><p><code>finalize</code>方法：类似C++的析构函数</p><blockquote><p>当对象没有任何引用时，垃圾回收器认为该对象是垃圾对象，然后使用垃圾回收机制销毁对象，在销毁对象前会先调用<code>finalize</code>方法（垃圾回收器有自己的GC算法，可以**通过<code>System.gc()</code>**主动触发垃圾回收机制）</p></blockquote></li></ul><blockquote><p><a href="https://github.com/zhangxun-SCU/java-practice">练习代码，可供参考</a></p><p>参考资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=342">韩顺平零基础学Java</a></li><li><a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程</a></li><li>[JAVA语言程序设计与数据结构（基础篇）第11版（梁勇(Y.Daniel Liang)著 戴开宇译）]</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础笔记</title>
      <link href="/archives/5a8a7c8a.html"/>
      <url>/archives/5a8a7c8a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java基础，包括一些java的语法，与C/C++有很多类似，所以笔记十分简略</p></blockquote><h1 id="注意事项与细节"><a class="markdownIt-Anchor" href="#注意事项与细节"></a> 注意事项与细节</h1><p>与[[C语言]]/[[C++]]不同，java是一门解释性语言</p><ul><li>一个源文件中最多只能包括一个public类，其他类的个数不限，编译后，每一个类都对应一个.class</li><li>源文件若有public类，则文件名与public类名相同</li><li>main方法可以在非public类中</li></ul><h1 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h1><p>java注释有单行注释、多行注释，这两着与c/c++相同。此外还有文档注释，注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件形式体现的该程序的说明文档，一般写在类，格式是多行注释每行都加*。</p><h1 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h1><h2 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h2><p>java虽为解释性语言，但其变量与[[C语言]]/[[C++]]中的变量更像，当你定义一个变量，就分配一段内存空间，内存空间中存放变量的值，与[[Python]]、[[JS]]变量存放对象的引用不同。</p><h2 id="的意义"><a class="markdownIt-Anchor" href="#的意义"></a> +的意义</h2><ul><li>两边均为数值的做加法</li><li>有一边为字符串是做拼接，从左到右</li></ul><h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2><p>基本数据类型：</p><blockquote><ul><li><p>数值型</p><ul><li><p>整数类型：byte[1], short[2], int[4], long[8]</p><blockquote><p>java中整型常量默认为int，要声明为long要在后面加上l/L，与[[C语言]]/[[C++]]类似</p></blockquote></li><li><p>浮点数类型：float[4], double[8]</p><blockquote><p>默认是double类型，可以添加f/F改为float类型</p></blockquote></li></ul></li><li><p>字符型：char[2]</p><blockquote><p>用单引号括起来，字符本质是一个整数ASCII</p></blockquote></li><li><p>布尔型：boolean[1]</p></li></ul></blockquote><p>引用数据类型：</p><blockquote><ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul></blockquote><h2 id="基本数据类型装换"><a class="markdownIt-Anchor" href="#基本数据类型装换"></a> 基本数据类型装换</h2><h3 id="自动类型转换"><a class="markdownIt-Anchor" href="#自动类型转换"></a> 自动类型转换</h3><p>java在进行赋值或者运算时，精度小的类型自动转换为精度大的类型</p><blockquote><p>char -&gt; int -&gt; long -&gt; float -&gt; double</p><p>byte -&gt; short -&gt; int -&gt; long -&gt;float -&gt; double</p></blockquote><ul><li><p>在多种数据类型混合运算时，系统先将所有数据类型装换成容量最大的那种数据类型，得到的结果也是精度/容量最大的那个类型</p></li><li><p><strong>byte、char、short</strong>在运算时转换为int类型去运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">c</span> <span class="operator">=</span> a + b; <span class="comment">// 错误：a+b的结果是int</span></span><br></pre></td></tr></table></figure></li><li><p>boolean类型不参数自动类型转换</p></li></ul><h3 id="强制类型转换"><a class="markdownIt-Anchor" href="#强制类型转换"></a> 强制类型转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (<span class="type">int</span>)<span class="number">1.9</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;n=&quot;</span> + n); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型与string的转换"><a class="markdownIt-Anchor" href="#基本数据类型与string的转换"></a> 基本数据类型与String的转换</h3><ul><li><p>基本数据类型 -&gt; String，方法与[[JS]]中的类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="number">100.0f</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> n1 + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> n2 + <span class="string">&#x27;&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>String -&gt; 基本数据类型，调用基本数据类型包装类的parse方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;100.1&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Integer.parseInt(s1);</span><br><span class="line"><span class="type">float</span> <span class="variable">n2</span> <span class="operator">=</span> Float.parseFloat(s2);</span><br></pre></td></tr></table></figure></li></ul><h1 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h1><ul><li>算术运算符与C++/C相同，也有++/—（前置与后置） ，两个整数的除法得到的也是整数</li><li>关系运算符与C++/C基本相同，但多了instanceof用于检查是否是类的对象</li><li>逻辑运算符，逻辑与：&amp;，逻辑或：|，逻辑异或：^，短路与：&amp;&amp;，短路或：||。<br />逻辑与与短路与的区别在于当短路与第一个条件为false则第二个条件不会判断，最终结果为false，效率高；短路或类似，第一个条件为true，第二个条件就不会判断</li><li>赋值运算符与C/C++相同，<strong>注意运算顺序是从右向左</strong>。</li><li>三元运算符：条件表达式？表达式1：表达式2</li><li>位运算：与C/C++基本类似，多了&gt;&gt;&gt;表示逻辑右移，注意&amp;也是按位与，|也是按位或</li></ul><h1 id="运算符优先级"><a class="markdownIt-Anchor" href="#运算符优先级"></a> 运算符优先级</h1><p><a href="http://c.biancheng.net/view/794.html">Java运算符优先级 (biancheng.net)</a></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208271821200.png" alt="image-20220827182137151" /></p><h1 id="标识符命名规范"><a class="markdownIt-Anchor" href="#标识符命名规范"></a> 标识符命名规范</h1><ul><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li><li>类名、接口名：多单词组成时用大驼峰命名法</li><li>变量名、方法名：小驼峰命名法</li><li>常量名：所有字母均大写</li><li>详细的参考文档，java代码规范</li></ul><h1 id="键盘输入"><a class="markdownIt-Anchor" href="#键盘输入"></a> 键盘输入</h1><ul><li>引入Scanner类所在的包</li><li>创建scanner对象</li><li>使用相关方法接收输入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">Sys.out.println(<span class="string">&quot;请输入:&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> myScanner.next();</span><br></pre></td></tr></table></figure><h1 id="分支"><a class="markdownIt-Anchor" href="#分支"></a> 分支</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(条件) &#123;</span><br><span class="line">    </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意switch表达式的返回值必须是byte/short/int/char/enum/String</strong>。</p><h1 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p><strong>java中有增强for，类似于C++的范围for</strong>。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="break"><a class="markdownIt-Anchor" href="#break"></a> break</h1><p><strong>break语句出现在多层循环中时，可以通过标签指明要终止的那一层语句块</strong>。类似goto语句，<strong>但注意我们一般不会这样使用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">label1:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    label2:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="comment">//break; 等价于 break label2</span></span><br><span class="line">        <span class="keyword">break</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="continue"><a class="markdownIt-Anchor" href="#continue"></a> continue</h1><p>同break，continue语句出现在多层循环中时，可以通过标签指明要跳过的的那一层语句块，但我们一般不会这样使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">label:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">    label2:</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)&#123;</span><br><span class="line">        <span class="comment">//continue; 等价于 continue label2</span></span><br><span class="line">        <span class="keyword">continue</span> label1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="return"><a class="markdownIt-Anchor" href="#return"></a> return</h1><p>如果在方法中就跳出方法，在主程序main中就跳出主程序</p><h1 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h1><p>数组用于存放多个同意类型的数据。<strong>注意数组也是一种数据类型，是引用类型</strong>。</p><h2 id="动态初始化"><a class="markdownIt-Anchor" href="#动态初始化"></a> 动态初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组，用于存放五个int</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> arr[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// int[] arr  是声明， new int[5]是创建/分配内存空间，可以先声明后创建</span></span><br><span class="line"><span class="type">int</span>[] arr;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h2 id="静态初始化"><a class="markdownIt-Anchor" href="#静态初始化"></a> 静态初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="注意细节"><a class="markdownIt-Anchor" href="#注意细节"></a> 注意细节</h2><p>数组创建后如果没有赋值，会有默认值，如下：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208281703674.png" alt="image-20220828170335619" /></p><h2 id="数组赋值"><a class="markdownIt-Anchor" href="#数组赋值"></a> 数组赋值</h2><p>与基本数据类型赋值不同，基本数据类型赋值赋的是具体的数据，数组赋值在默认情况下是引用传递，赋的是地址。详细可见[[值传递与引用传递的图示]]，如图：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208291222129.png" alt="image-20220829122254048" /></p><p>当然如果使用new来创建一个数组得到的自然是一个独立空间的数组</p><h2 id="数组扩容动态添加"><a class="markdownIt-Anchor" href="#数组扩容动态添加"></a> 数组扩容/动态添加</h2><p>本质创建一个更大的arrNew，将arr的内容存入arrNew，在让arr指向arrNew。（注意使用arr.length来获取数组长度）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态添加元素</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayAdd</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">myScanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="comment">// 创建一个新的更大的数组，并copy原数组</span></span><br><span class="line">            <span class="type">int</span>[] arrNew = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">                arrNew[i] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 添加到新数组</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你要添加的元素：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">addNum</span> <span class="operator">=</span> myScanner.nextInt();</span><br><span class="line">            arrNew[arr.length] = addNum;</span><br><span class="line">            <span class="comment">// 原数组指向新数组</span></span><br><span class="line">            arr = arrNew;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">                System.out.println(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续：&quot;</span>);</span><br><span class="line">            <span class="type">char</span> <span class="variable">flag</span> <span class="operator">=</span> myScanner.next().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="string">&#x27;n&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h2><p>数组中存放数组。见[[多维数组图示]]，如图：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208291842776.png" alt="image-20220829184222683" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态初始化</span></span><br><span class="line"><span class="type">int</span>[][] arr1 = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">                &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 动态初始化</span></span><br><span class="line"><span class="type">int</span> <span class="variable">arr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span>[<span class="number">3</span>][] arr3 = &#123;&#123;<span class="number">1</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">                 &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="comment">// 二位数组声明方式</span></span><br><span class="line"><span class="type">int</span>[][] arr;</span><br><span class="line"><span class="type">int</span>[] arr[];</span><br><span class="line"><span class="type">int</span> arr[][];</span><br></pre></td></tr></table></figure><p><strong>需要注意的是，与C/C++不同，二维数组中每一个一维数组的元素个数不一定相同</strong>。</p><h1 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">object</span>()&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象在内存中的存在形式"><a class="markdownIt-Anchor" href="#对象在内存中的存在形式"></a> 对象在内存中的存在形式</h2><p>如[[对象在内存中存在形式图示]]，如图<img src="https://cdn.jsdelivr.net/gh/zhangxun-SCU/pic/img/202208311808773.png" alt="image-20220831180828661" /></p><h2 id="属性"><a class="markdownIt-Anchor" href="#属性"></a> 属性</h2><p><strong>成员变量 = 属性 = field</strong>.</p><p>属性是类的一个组成部分，属性可以是基本数据类型也可以是引用类型。</p><p>属性不赋值会有默认值，同前面数组的规则相同：<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208281703674.png" alt="image-20220828170335619" /></p><h2 id="访问修饰符"><a class="markdownIt-Anchor" href="#访问修饰符"></a> 访问修饰符</h2><p>控制属性的访问范围</p><ul><li>public</li><li>proctected</li><li>default (默认)</li><li>private</li></ul><h2 id="java内存结构分析"><a class="markdownIt-Anchor" href="#java内存结构分析"></a> Java内存结构分析</h2><ul><li>栈：一般存放基本数据类型（局部变量）</li><li>堆：存放对象（对象、数组等）</li><li>方法区：常量池（常量、字符串等）、类加载信息</li></ul><h2 id="方法调用机制"><a class="markdownIt-Anchor" href="#方法调用机制"></a> 方法调用机制</h2><p>我的初步理解就是C/C++的函数或方法了，机制相同的吧，见[[方法调用机制]]，如图：<img src="https://cdn.jsdelivr.net/gh/zhangxun-SCU/pic/img/202209011552820.png" alt="image-20220901155252705" /></p><h2 id="方法定义"><a class="markdownIt-Anchor" href="#方法定义"></a> 方法定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> num1, <span class="type">int</span> num2)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个方法只能有一个返回值，返回值可以为任意类型，包含基本数据类型和引用数据类型（数组，对象）</li><li>方法定义不能嵌套</li></ul><h2 id="方法重载"><a class="markdownIt-Anchor" href="#方法重载"></a> 方法重载</h2><p>即同一个类中可以有同名方法存在，但要求形参列表不同</p><h2 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h2><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可变参数的实参可以是0个或任意多个</li><li>可变参数实参可以是数组，其实可变参数本质就是数组</li><li>当可变参数与普通参数放在一起时，注意将可变参数放在后面</li><li>一个形参列表只能有一个可变参数</li></ul><h2 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h2><ul><li>全局变量：也即是属性</li><li>局部变量：一般指成员方法中定义的变量</li></ul><p><strong>全局变量/属性可以不赋值直接使用，因为有默认值，但局部变量必须赋值，局部变量没有默认值</strong>。</p><p><strong>局部变量与全局变量是可以重名的，访问时就近原则，即在局部作用域里找局部变量，没有找到再找全局变量</strong>。</p><p><strong>属性/全局变量的声明周期随着对象的创建而创建，伴随对象的死亡而死亡，而局部变量的声明周期更短，在一次方法的调用过程中</strong>。</p><h2 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法</h2><ul><li>构造器修饰符可以默认</li><li>构造器没有返回值</li><li>方法名与类名一样</li></ul><p><strong>构造器完成的是对象的初始化，而不是对象的创造</strong>。</p><p><strong>与C++相同，系统有一个默认的无参构造器，若没有定义构造器就使用默认的构造器，如果定义了就把默认构造器覆盖了，不能使用默认构造器了，除非显式的定义一个</strong>。</p><h2 id="this"><a class="markdownIt-Anchor" href="#this"></a> this</h2><p><strong>Java中this除了常见的用法外，还可以访问构造器，此时只能在一个构造器内使用，用于访问/调用另一个构造器，格式是<code>this(args)</code>而且此时this()语句必须放在第一句</strong>。</p><blockquote><p><a href="https://github.com/zhangxun-SCU/java-practice">练习代码，可供参考</a></p><p>参考资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1fh411y7R8?p=342">韩顺平零基础学Java</a></li><li><a href="https://www.runoob.com/java/java-tutorial.html">菜鸟教程</a></li><li>[JAVA语言程序设计与数据结构（基础篇）第11版（梁勇(Y.Daniel Liang)著 戴开宇译）]</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/archives/5a8a6c8d.html"/>
      <url>/archives/5a8a6c8d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>JS学习笔记</p></blockquote><h1 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> JavaScript</h1><h2 id="2022525-hello-world"><a class="markdownIt-Anchor" href="#2022525-hello-world"></a> 2022.5.25 Hello world!</h2><h3 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello world</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202205251958118.png" alt="image-20220525195817010" /></p><h3 id="js编写位置"><a class="markdownIt-Anchor" href="#js编写位置"></a> JS编写位置</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202205252010086.png" alt="image-20220525201056042" /></p><h3 id="基本规则"><a class="markdownIt-Anchor" href="#基本规则"></a> 基本规则</h3><ul><li>注释<strong>与C语言相同</strong>。</li><li>JS语句要以分号结尾。（虽然JS有自动添加分号的机制，但推荐写）</li><li>JS严格区分大小写</li><li>忽略空格和换行</li></ul><h3 id="字面量和变量"><a class="markdownIt-Anchor" href="#字面量和变量"></a> 字面量和变量</h3><ul><li>字面量：表示的就是一个值，它所表示的意思就是它的字面意思，如：1， 2， 3， ‘hello’， true</li><li>变量：用于存储字面量，如声明一个变量：<code>let a</code>,<code>var a</code>,声明一个常量：<code>const a</code>。</li></ul><h2 id="2022526"><a class="markdownIt-Anchor" href="#2022526"></a> 2022.5.26</h2><h3 id="标志符规范"><a class="markdownIt-Anchor" href="#标志符规范"></a> 标志符规范</h3><p>在程序中所有的可以自主命名的即标识符，如变量名，函数名，类名。</p><ul><li>标识符中可以含有字母、数字、_、$，但不能以数字开头</li><li>表示符不能是关键字（已经使用的）和保留字，（以后可能会用）<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E5%85%B3%E9%94%AE%E5%AD%97">词法文法 - JavaScript | MDN (mozilla.org)</a>，也不建议使用内置函数名。</li><li>驼峰命名法</li></ul><h3 id="基本数据类型不可变类型-简单数据类型"><a class="markdownIt-Anchor" href="#基本数据类型不可变类型-简单数据类型"></a> 基本数据类型（不可变类型、简单数据类型）</h3><ul><li>字符串（string），单引号、双引号都行，不要混合使用，引号也不能跨行使用，同类型的引号不能嵌套。‘\’表示转义字符。（可以通过\使引号换行）</li><li>模板字符串，即格式字符串，用反单引号表示，会保留你的格式（如python中的三引号）。<br />并且模板字符串中可以直接嵌入变量（使用<code>$&#123;变量名&#125;</code>）</li><li>数值（number）：整数、浮点数。<br />大多数整数运算都能得到精确的结果，但大多数小数运算也无法得到精确的结果。<br />数值超过一定范围后，会使用Infinity表示无穷，类型是number。<br />在ES2020最新标准中，使用新数字类型bigint表示大整数，但大整数bigint不能和普通number进行运算。<br />NaN表示not a number，类型也是number。<br />二进制以0b开头，八进制以0o开头，十六进制以0x开头。</li><li>typeof运算符返回数据的数据类型</li><li>布尔值（boolean）：逻辑判断，true，false。</li><li>空值和未定义：null，通常表示一个空的对象，表示不存在的东西（null返回一个空对象，但它不是对象，而是简单数据类型）<br />undefined：定义一个变量但没有赋值，它的类型就是undefined</li></ul><p>[[JS的简单数据类型与复杂数据类型]]</p><h3 id="关于js的变量"><a class="markdownIt-Anchor" href="#关于js的变量"></a> 关于JS的变量</h3><p>JS中的变量实际上是存储的一个地址，变量存储在一个内存空间，值存储在一个内存空间，而变量存储的是值的地址，就是以这种方式在变量与值之间建立联系的，与其他语言有所不同。如let a=10， let b=10，中的‘10’是同一个‘10’，<strong>所以，注意JS的基本数据类型都是不可修改的，比如let a=10，a=11，这里是把a存10的地址改为了11的地址，而不是将10改为11</strong>。</p><p><strong>而常量是限制变量被重新赋值，换句话说，常量锁的是变量存储的那个地址，即常量存储的只能是一个地址</strong>。</p><h2 id="2022527"><a class="markdownIt-Anchor" href="#2022527"></a> 2022.5.27</h2><h3 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h3><p>将变量从一种类型转换为其他类型的值，注意：<strong>像上文说的一样，对于基本数据类型，本质是在内存中创建了一个其它类型的值，在将a存的地址改为新类型的地址，而不是直接将值进行改变</strong>。</p><h4 id="其他类型转换为字符串"><a class="markdownIt-Anchor" href="#其他类型转换为字符串"></a> 其他类型转换为字符串</h4><ul><li>调用被转换类型的<code>toString()</code>方法，返回值就是string（<strong>null，undefined没有这个方法</strong>）（显示转换）</li><li>调用<code>String()</code>函数，此函数对于有<code>toString()</code>方法的就直接调用<code>toString()</code>方法，没有的直接转化为字符串。</li><li>隐式转换：为任意值加上空串（原理同<code>String()</code>）</li></ul><h4 id="其他类型转换为数值"><a class="markdownIt-Anchor" href="#其他类型转换为数值"></a> 其他类型转换为数值</h4><ul><li>使用<code>Number()</code>函数，如果不合法就便为NaN，true为1，false为0。null为0，undefined为NaN</li><li><code>parseInt()</code>函数将一个字符串解析为整数或对数字进行取整，<code>parseFloat()</code>函数将字符串解析为浮点数。这两个函数本质是将字符串从左向右读取，一个一个变为数字，知道遇到不合法的就省略掉后面的，如123px可以变为123。</li><li>隐式转换：使用一元的+，如<code>+a</code>。</li></ul><h4 id="其他类型转换为布尔值"><a class="markdownIt-Anchor" href="#其他类型转换为布尔值"></a> 其他类型转换为布尔值</h4><ul><li>使用<code>Boolean()</code>函数转换为布尔值。<ul><li>对于数字，非0为true，0和NaN为false</li><li>对于字符串，只用空串为false</li><li>null和undefined为false</li><li>其他表示没有或错误的都会转换为false</li></ul></li></ul><h3 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">表达式与运算符 - JavaScript | MDN (mozilla.org)</a></p><ul><li>字符串进行加法，就相当于字符串拼接，并且任何值与字符串进行加法时，都会转换为字符串，然后拼接；所以也可让一个值加上一个空串来将它类型转换为string<br />但对于其他类型，它们都会先转换为数值类型在运算，即隐式类型转换。所以也可让一个值加上一个0来将它类型转换为number</li><li>任何值和NaN做任何运算结果都是NaN。</li><li>利用一元运算符<code>+</code>可以将一个任意类型的值转换为数值number类型。</li><li><code>a++</code>,<code>++a</code>，即前置<ins>和后置</ins>都会使a立刻加1，但它们返回结果不同，前置<ins>返回的是自增前的值，即旧值，后置</ins>返回的是自增后的值，即新值。</li><li>室友赋值运算符或自增、自减才会改变变量的值</li><li>非布尔值进行逻辑运算，会先转换为布尔值，再运算，但返回的是原本的值</li><li>非数值类型进行大小比较是会先转换为数值再进行大小比较，但当比较两边都为字符串时，实际上比较的就是字符串的编码。</li><li>相等运算符，如果两边的值的类型不同，会将其转换为相同的类型后再比较，通常转换为Number数值类型（例外：null<mark>0为false， null&gt;0为false， null&gt;=0为true， null</mark>undefined为true）</li><li>全等运算符不会发生自动的类型转换，换言之  ，它还会比较类型是否相同。（<strong>null与undefine不全等</strong>）<strong>注意：NaN不和任何值相等，包括它自己</strong>。所以检查一个值是否是NaN有一个专门的函数，<code>isNaN()</code>。</li><li>关系运算符：一般比较时都转换为数字，除了比较两边都是字符串时。</li><li>条件运算符：即三元运算符</li></ul><h2 id="2022717"><a class="markdownIt-Anchor" href="#2022717"></a> 2022.7.17</h2><h3 id="代码块"><a class="markdownIt-Anchor" href="#代码块"></a> 代码块</h3><blockquote><p>再代码块内用let声明的变量是块作用域，再块外不能访问（但使用var声明的变量没有块作用域）</p></blockquote><h3 id="条件语句"><a class="markdownIt-Anchor" href="#条件语句"></a> 条件语句</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> f (条件)&#123;</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (条件)&#123;</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;</span><br><span class="line">      <span class="keyword">case</span> 表达式:</span><br><span class="line">          语句......</span><br><span class="line">      <span class="keyword">case</span> 表达式:</span><br><span class="line">          语句......</span><br><span class="line">      <span class="keyword">case</span> 表达式:</span><br><span class="line">          语句......</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  执行时自上而下进行判断，从遇到的第一个满足条件的case开始执行，后面的均会执行（与C语言中相同），一般和break一起用</span></span><br><span class="line"><span class="comment">  */</span>        </span><br></pre></td></tr></table></figure><h3 id="循环"><a class="markdownIt-Anchor" href="#循环"></a> 循环</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件)&#123;</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/*本质就是重复的if*/</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">      </span><br><span class="line">&#125;<span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 条件表达式; 更新表达式)&#123;</span><br><span class="line">      语句......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计时"><a class="markdownIt-Anchor" href="#计时"></a> 计时</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可传入参数-&gt;计时器名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>()  <span class="comment">// 计时开始</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>()  <span class="comment">//计时结束</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a class="markdownIt-Anchor" href="#对象"></a> 对象</h3><blockquote><p>对象也是JS中的一种数据类型</p><p>与基本数据类型（不可变类型，值与值之间不存在任何联系）不同，对象相当于一个容器，对象中可以存储不同类型的数据，即属性</p><p>比较两个对象时，无论是相等还是全等，比较的都是对象的内存地址</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个新对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">添加属性：</span></span><br><span class="line"><span class="comment">obj.name = &#x27;cw&#x27;</span></span><br><span class="line"><span class="comment">obj[&#x27;属性名&#x27;] = &#x27;属性值&#x27;</span></span><br><span class="line"><span class="comment">let obj&#123;</span></span><br><span class="line"><span class="comment">name:&#x27;cw&#x27;,</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;cw&#x27;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">访问属性：</span></span><br><span class="line"><span class="comment">obj.name</span></span><br><span class="line"><span class="comment">obj[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">obj.<span class="property">name</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">删除属性：</span></span><br><span class="line"><span class="comment">delete obj.name</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span></span><br></pre></td></tr></table></figure><h3 id="改变量和改对象"><a class="markdownIt-Anchor" href="#改变量和改对象"></a> 改变量和改对象</h3><blockquote><ul><li>基本数据类型创建的变量是不可变的，变量存储的是变量值的地址，使用变量时有地址去找到变量值，变量值是不可变的，所以<strong>该变量只影响自己，不改变别人</strong>。</li><li>对于对象，其属性值是可变的，对象的属性存储的也是属性值的地址，但修改对象属性值时也会影响其他指向该地址的属性或对象</li><li><strong>注意变量与属性的不同</strong>。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;cw&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj1 = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;ZX&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h3 id="属性的枚举"><a class="markdownIt-Anchor" href="#属性的枚举"></a> 属性的枚举</h3><ul><li><p>检查一个对象是否有某个属性：<code>in</code>运算符，<strong>包括原型</strong>。</p></li><li><p>枚举：<code>for in</code>语句：</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">每次执行都会将一个属性名赋值给n    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="垃圾回收"><a class="markdownIt-Anchor" href="#垃圾回收"></a> 垃圾回收</h3><p><strong>JS中有自动的垃圾回收机制</strong>，我们需要做的就是将不在使用的对象设置为null</p><h2 id="2022718"><a class="markdownIt-Anchor" href="#2022718"></a> 2022.7.18</h2><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数传参可以传递任意数量的实参，少了有undefined，多了不管。</p></li><li><p>返回值，任何值都可以作为返回值（包括函数、对象）</p></li><li><p>匿名函数：不能直接以function开头（可以以括号开头，此时调用就为立即执行函数，该函数再创建后立刻调用，并且只调用一次）</p></li></ul><blockquote><p><strong>this</strong>：函数的<code>this</code>，类似C++中：</p><ul><li>以函数形式调用，this是window</li><li>以方法形式调用，this是调用方法的对象</li><li>以构造函数的形式调用，this是新建的对象</li><li>以call或apply调用时，可以指定函数的this</li></ul></blockquote><blockquote><p><strong>arguments</strong>：除this外，函数中还有一个隐含的参数角arguments，arguments是一个类数组对象（伪数组，类数组对象和数组的操作方式基本一致，只是不能调用数组的方法），在函数执行时，所有实参都会存储在arguments对象中，通过arguments，我们就可以不定义形参也能使用实参了，换句话说我们也不用在乎实参的个数</p></blockquote><blockquote><p><strong>函数对象的方法</strong>：</p><ul><li><code>call()</code>：调用call()方法，实际上和直接调用函数类似，call可以用来指定函数的this，它的第一个参数传谁函数的this就是谁，后面的参数会成为函数的参数</li><li><code>apply()</code>，与call相同，可以指定this，但apply传函数参数时不能一个一个传，得保存到一个数组中传递</li><li>bind()：调用bind()时，会返回一个新的函数对象，新的函数对象功能与原来函数的功能是一样的，只是新的函数对象的this是绑定的。与前两个不同，调用此方法不会调用函数。</li></ul></blockquote><blockquote><p><strong>剩余参数</strong>：类似于<code>...args</code>被称为剩余参数，剩余参数会获取到所有没有形参对应的实参，于arguments类似，并且剩余参数是一个数组，不是类数组对象，可以调用数组的方法，使用更加灵活</p></blockquote><h3 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h3><ul><li>全局作用域：全局作用域再页面加载时创建，在页面关闭时销毁。全局作用域中定义的变量时全局变量，定义的函数是全局函数，可以在任意位置访问。<br /><strong>全局作用域中存在一个全局对象window，window对象代表浏览器窗口</strong>。<strong>在全局作用域中，所有使用var声明的变量，都会作为全局对象window的属性保存</strong>(通过let声明的对象则不是，let声明的变量不会存放在window中)，<strong>使用function声明的函数都会作为window的方法保存</strong>。<br /><strong>变量提升</strong>：<strong>在JS中，使用var声明的变量会在所有的代码执行千被创建，但不会赋值</strong>。使用function开头的函数同理，也可以在函数声明之前就调用函数。</li><li>函数作用域：函数作用域在函数调用时创建，调用结束销毁。在函数作用域内声明的变量是局部变量。局部变量只能在函数内部访问，外部无法访问。<br /><strong>在函数内部声明变脸时如果不使用var或let，则变量会变成全局变量</strong>。<br /><strong>在JS中，函数作用域可以访问全局作用域中的变量，全局作用域无法访问函数作用域的变量</strong>。</li></ul><h3 id="作用域链"><a class="markdownIt-Anchor" href="#作用域链"></a> 作用域链</h3><p>当访问一个变量时，先在当前作用域内找，没有找到再到上一级作用域内去找，以此类推。<strong>注意函数作用域的级数是定义的位置决定的</strong>，定义在哪上一级作用域就在哪。</p><h2 id="2022719"><a class="markdownIt-Anchor" href="#2022719"></a> 2022.7.19</h2><h3 id="this"><a class="markdownIt-Anchor" href="#this"></a> this</h3><p><strong>与C++中this类似</strong>。</p><p>在JS中调用函数时，浏览器会向函数传递一个隐含的参数，即this，<strong>this即调用此函数/方法的对象</strong>。</p><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><p>构造函数与普通函数外观上（定义上）无区别，但构造函数函数名首字母建议大写。</p><p><strong>构造函数与普通函数调用方式不同，当一个函数直接调用时，他是一个普通函数，如果使用new调用，此函数就是构造函数</strong>。</p><blockquote><p>构造函数执行流程：</p><ol><li>创建一个新的对象</li><li>将这个新的对象设置为函数中的this</li><li>执行函数</li><li>将新建的对象返回</li></ol></blockquote><p><strong>其实一个构造函数就是一个类</strong>。</p><p>运算符<code>instanceof</code>：用于检查一个对象是否是一个类的实例，<code>对象 instanceof 类</code>。</p><h2 id="2022721"><a class="markdownIt-Anchor" href="#2022721"></a> 2022.7.21</h2><h3 id="原型"><a class="markdownIt-Anchor" href="#原型"></a> 原型</h3><p>每一个函数对象中都有一个属性：prototype，该属性指向一个对象，即原型对象。</p><p>如果函数作为普通函数调用，则原型对象没有任何作用；反之，如果作为构造函数调用，那么通过该构造函数所创建的对象中都会有一个隐含的属性（__proto__）指向函数的原型对象（prototype）。<strong>换句话说，原型对象是一个公共的区域，所有对象的实例和对象都能访问原型对象</strong>，这样我们就可以将一些实例所共有的属性或方法存储在原型对象中，由此避免重复定义函数（直接将函数定义在构造函数内）、污染命名空间（将函数定义在全局作用域）等问题。</p><p>当访问一个对象中的属性是，JS会现在对象本身中寻早；没有找到在去对象的原型（__proto__）中寻找；若还是没找到则去原型（原型也是一个对象，故也有原型）的原型中去寻找，以此类推，直到找到object的原型（prototype，object的原型就到头了，object的原型是所有类的最开始的原型，object原型的原型是null），如果找到object的原型还没找到就返回undefined。<strong>搜索的过程就是原型链</strong>。（<code>instanceof</code>就是找对象的原型链中是否有类）</p><p><strong>找变量：在作用域链上寻找，找属性：在原型链上寻找</strong>。</p><ul><li>类.prototype：显示原型</li><li>__proto__：隐式原型</li></ul><h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3><blockquote><p><strong>定义一个类时，如果属性和方法是类独有的，就直接在构造函数中设置，如果属性和方法是公共的，每个对象的值相同，可以通过原型添加</strong>。</p></blockquote><h3 id="对象分类"><a class="markdownIt-Anchor" href="#对象分类"></a> 对象分类</h3><ol><li>内建对象：由ES标准所规定的对象，object、Function、string、Boolean、Number、Array、Math、Date、JSON</li><li>宿主对象：由JS运行环境所提供的对象，在浏览器中：如Window、Console、Document、DOM、BOM……</li><li>自定义对象，由开发人员自己定义的对象</li></ol><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p><code>let arr = []</code></p><p>数组也是一个对象，存储一组有序的数据，索引以0开始</p><p><strong>数组中可以存任意的数据类型，一个数组中也可以存任意数据类型</strong>。<strong>但我们使用过程中尽量保证一个数组中的数据类型是相同的</strong>。</p><p><strong>本质上数组内也是存的指向数据（变量）的地址</strong>。（于python类似）</p><ul><li>数组的length，用于获取数组长度（最大索引+1），length可以修改，如果改小，多余的元素会被删除，改大会有空余。</li><li>数组的in：JS中in是检查属性是否在对象中，或者某对象是否有这个属性，对应到数组中就是就是检查数组是否有这个索引</li></ul><blockquote><p><strong>遍历数组</strong>：</p><ol><li>除了普通的循环，</li><li>也有范围for或者叫枚举即<code>for (let i in arr)</code>，这里i是索引。还有<code>for(let v of arr)</code>，v就是元素。</li><li>还有<strong>forEach方法</strong>，该方法需要一个函数作为参数（通常用匿名函数，这种函数由我们定义，但不有我们调用，被称为回调函数），在forEach中，有多少个元素，回调函数就调用对少次，forEach的回调函数共有三个参数：1. 当前遍历的元素element，2.当前遍历元素的索引index，3.当前被遍历的数组对象arr</li></ol><p><strong>常用方法</strong>：</p><ul><li><code>push()</code>，向数组的最后添加一个或多个元素，返回数组新的长度。</li><li><code>pop()</code>，与push相反，但返回值是删除（弹出）的那个元素</li><li><code>unshift()</code>，像数组前面添加一个或多个元素，返回数组长度</li><li><code>shift()</code>，删除并返回数组的第一个元素</li><li><code>slice()</code>，两个参数：起始位置索引，结束位置索引（不包括结束位置 ），索引可以是负值，-1代表最后一个。<strong>slice是一种浅赋值（浅拷贝）</strong>，这里的浅拷贝于python中一样–[[python中的浅拷贝深拷贝]]。</li><li><code>splice()</code>，可以用来删除，替换，添加数组中的元素，该方法是破坏性的方法，会对数组产生影响，多个参数：第一个是起始位置索引，第二个是删除的数量，后面还可以跟新的参数，表示使用这些元素去替换原来删除的元素。<strong>可以用此灵活的插入元素</strong>。</li><li><code>isArray()</code>：检查一个对象是否是数组，因为type fo 数组返回的也是object，所以用isArray</li><li><code>contact()</code>：用来连接两个或多个数组或将新的值加入数组，将多个数组拼接到新的数组中返回，是一个分破坏性的方法</li><li><code>indexOf()</code>：查询元素在数组中的位置，可接收两个参数，第一个是待查询的元素，第二个是查询的起始索引，返回值是该元素第一次出现的索引</li><li><code>lastIndexOf()</code>：使用与indexOf()相同，但是从后向前找</li><li><code>join()</code>：将数组中的所有元素连接为字符串，接收参数为连接符</li><li><code>reverse()</code>：反转数组，破坏性方法</li><li><code>sort()</code>：对数组排序，破坏性方法，<strong>使用sort对元素进行排序时，比较的是元素的字符编码，不是数字的大小，相当于是字符串的排序</strong>，但可以在sort中传入函数（回调函数），通过函数来传递排序规则：升序：<code>function(a, b)&#123;return a - b;&#125;</code>，降序：<code>funtion(a, b)&#123;return b -a;&#125;</code>.</li></ul></blockquote><h2 id="2022726"><a class="markdownIt-Anchor" href="#2022726"></a> 2022.7.26</h2><h3 id="math"><a class="markdownIt-Anchor" href="#math"></a> Math</h3><blockquote><p>Math是一个类，一个工具类，不是一个构造函数，不能用来创造对象，里面的属性方法都是静态方法。如：</p><ul><li><code>Math.PI</code>是圆周率</li><li><code>Math.abs()</code>是取绝对值</li><li><code>Math.ceil()</code>是向上取整</li><li><code>Math.floor()</code>是向下取整</li><li><code>Math.round()</code>是四舍五入</li><li><code>Math.max()、Math.min()</code>取最大最小值</li><li><code>Math().pow()</code>求次方与**作用相同</li><li><code>Math.sqrt()</code>求开方</li><li><code>math.random()</code>生成一个0到1的随机数，可以通过±*/扩大返回，在使用<code>Math.round()</code>进行取整，可以通过随机数排序数组以达到打乱数组的目的</li></ul></blockquote><h3 id="date"><a class="markdownIt-Anchor" href="#date"></a> Date</h3><blockquote><p>JS中所有日期相关的数据都用Date表示，直接创建一个Date对象，就会创建一个表示当前时间的对象</p><p>创建指定日期的对象：传入表示日期的字符串，格式：‘月/日/年 时：分：秒’</p><ul><li><code>getDay()</code>：获取当前日期对象是周几，返回值0-6，0是周日</li><li><code>getDate()</code>：获取当前几号</li><li><code>getMonth()</code>：获取当前几月，返回值是0-11，0是1月，11是12月</li><li><code>getFullYear()</code>：获取完整的四位数年份</li><li><code>getTime()</code>：获取当前日期对象的时间戳，时间戳就是自1970年1月1日0时0分0秒到现在所经历的毫秒，在计算机底层，所有的时间都是以时间戳的形式存储的</li><li><code>Date.now()</code>：获取当前的时间戳</li></ul></blockquote><h3 id="包装类"><a class="markdownIt-Anchor" href="#包装类"></a> 包装类</h3><p>在JS中，提供了三个包装类：String，Number，Boolean</p><p>通过这三个包装类就可以直接创建String类型的、Number类型的、Boolean类型的对象，可以获得功能更强大的String、Number、Boolean，<strong>但我们实际开发中几乎不会这样用</strong>。包装类是给JS使用的。</p><p>当我们调用一个基本数据类型的属性或方法时，浏览器会通过包装临时将其转换为对象，然后调用对象的属性或者方法。<strong>这代表着所有String的方法字符串都可以使用，所有Number的方法数值都可以使用，所有Boolean的方法true或false都可以使用</strong>。</p><h2 id="2022727"><a class="markdownIt-Anchor" href="#2022727"></a> 2022.7.27</h2><h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3><p><strong>字符串本质是一个字符数组</strong>。</p><blockquote><p>属性：</p><ul><li>length：字符串长度</li></ul><p>方法：</p><ul><li><code>concat()</code>：用来将两个或多个字符串连接为一个新的串，和<code>+</code>相同</li><li><code>charAt()</code>：传递一个数字为参数，就是根据索引找字符，与直接使用索引一样</li><li><code>charCodeAt()</code>：获取对应索引上字符的字符编码，也有根据字符编码找字符的方法，是一个类方法：<code>String.fromCharCode()</code></li><li><code>indexOf()</code>：查找一个字符或子串第一次出现的索引，没有找到返回-1，与数组的相同，可以指定起始位置</li><li><code>lastIndexOf()</code>：从后向前寻找</li><li><code>slice()</code>：切片，与数组的用法相同</li><li><code>split()</code>：将一个字符串拆分为一个数组，可传递参数指定拆分标志字符，与<code>join()</code>相反</li><li><code>toLowerCase()、toUpperCase()</code>：大小写转换</li><li><code>trim()</code>：去除字符串两端的空格，还有<code>trimEnd()、trimRight()、trimStart()、trimLeft()</code></li><li><code>endsWith()、startsWith()</code>：检查是否以某串开头</li><li><code>str.search()</code>：用来搜索字符串中是否含有指定的子串，返回子串第一次出现的位置，没有找到返回-1，传入参数可以是一个[[正则表达式]]</li><li><code>str.split()</code>：上面的补充，传入参数可以是正则表达式</li><li><code>str.replace()</code>：上面的补充，传入参数可以的正则表达式</li><li><code>str.match()</code>：传入参数正则表达式，将字符串符合正则表达式的内容提取出来</li></ul></blockquote><h3 id="解构"><a class="markdownIt-Anchor" href="#解构"></a> 解构</h3><ul><li>将数组元素赋给多个变量：<code>let [a, b, ...rest] = arr</code></li><li>将数组中的元素拆分作为参数传递<code>...arr</code></li><li>对对象进行结构</li></ul><h3 id="箭头函数"><a class="markdownIt-Anchor" href="#箭头函数"></a> 箭头函数</h3><p><strong>语法</strong>：<code>([参数列表])=&gt;返回值/代码块&#123;语句&#125;</code>，可以赋值</p><p><strong>箭头函数的this不会因为调用方式改变，箭头函数的this在函数创建是就已经确定，由定义时的外层作用域决定</strong>。</p><p>箭头函数写法更加简洁，适合用来作为回调函数</p><h3 id="闭包"><a class="markdownIt-Anchor" href="#闭包"></a> 闭包</h3><p><strong>闭包就是能访问到外部函数变量的内部函数</strong>。（函数中的函数）</p><p><strong>闭包主要用来隐藏一些不希望别人看到的东西</strong>。</p><blockquote><p>闭包条件：</p><ul><li>函数嵌套</li><li>内部函数访问外部函数变量</li><li>将内部函数返回</li></ul></blockquote><p><strong>闭包的生命周期：外部函数每调用一次就产生一个闭包（相当于外部函数作用域），当内部函数被垃圾回收是闭包就消失了</strong>。</p><p>有时希望闭包只有一个，即外层函数只能被调用一次，这时可以使用匿名函数。</p><h2 id="2022728"><a class="markdownIt-Anchor" href="#2022728"></a> 2022.7.28</h2><h3 id="dom"><a class="markdownIt-Anchor" href="#dom"></a> DOM</h3><blockquote><p><strong>DOM(Document Object Model)：文档对象模型</strong>：</p><ul><li>文档：就是指网页</li><li>对象：DOM将网页中的所有东西都转换为了对象</li><li>模型：一个网页中所有节点（标签）之间的关系，网页中的所有部分（元素、文本、注释等）都可以称为一个节点，但节点也有不同的类型：<ul><li>文档节点：表示整个网页</li><li>元素节点：各种标签</li><li>属性节点：标签中的属性</li><li>文本节点：标签中的文字</li></ul></li></ul></blockquote><h3 id="dom查询"><a class="markdownIt-Anchor" href="#dom查询"></a> DOM查询</h3><p>document表示整个网页的对象，由浏览器提供，可以直接使用，document是整个DOM树种最顶级的对象（window之下），通过document可以获取到其他任意网页元素对象</p><blockquote><p>除了get（<code>getElementById()</code>(根据id)、<code>getElementByClassName()</code>(根据class)、<code>getElementByTagName()</code>(根据标签名，<strong>注意返回的是一个HTMLCollection，它会实时更新</strong>)、<code>getElementByName()</code>(根据name属性，主要用于表单，<strong>注意获取到的是一个list</strong>)）一类的方法document提供了很多直接获取元素的方法</p><ul><li>document.body</li><li>document.documentElement -&gt; HTML</li><li>document.querySelect()：根据CSS选择选择元素节点，需要一个选择器的字符串作为参数，但<strong>该方法只会返回符合条件的第一个元素</strong>。</li><li>document.querySelectAll()：与上面的方法用法一样，只是这个会<strong>获取并返回符合条件的所有元素（元素）</strong>。但<strong>注意此方法返回的是一个NodeList，不会实时更新，只有一个也是返回列表，没有找到就返回空列表</strong>。</li></ul></blockquote><blockquote><p>获取元素的后代和子元素</p><ul><li>调用某元素的get一类的方法，得到的就是它的后代元素</li><li>用某元素的<code>childNodes</code>属性，获取后代的<strong>子节点</strong>，注意是子节点，包括元素节点、属性节点、文本节点等</li><li>使用某元素的<code>children</code>属性，这个属性获取的就是所有子元素</li><li>属性<code>firstChild</code>:第一个子节点（还有<code>lastChild</code>）</li><li>属性<code>firstElementChild</code>:第一个子元素（还有<code>lastElementChild</code>）</li></ul></blockquote><blockquote><p>获取父节点：</p><ul><li>属性<code>parentNode</code>：找到父节点，注意父节点就不可能是文本节点了，通常都是元素节点</li></ul></blockquote><blockquote><p>获取兄弟节点：</p><ul><li>属性<code>previousSibling</code>：获取前一个兄弟节点，可能是文本节点（还有<code>nextSibling</code>）</li><li>属性<code>previousElementSibling</code>：获取前一个兄弟元素（<code>nextElementSibling</code>）</li></ul></blockquote><blockquote><p>获得标签内部的东西：</p><ul><li>属性<code>innerHTML</code>：获得标签内部的HTML代码</li><li>属性<code>innerText</code>/<code>textContent</code>：获得标签内的文本内容，会去除掉空格和换行</li><li>又是使用<code>firstChild</code>属性可以获取到文本节点，此时获取到的是一个文本对象，使用其<code>nodeValue</code>属性就可以获得文本</li></ul></blockquote><h3 id="事件"><a class="markdownIt-Anchor" href="#事件"></a> 事件</h3><p>事件由三部分组成：事件源、事件类型、事件处理程序，也叫事件三要素</p><p><strong>事件就是用户与网页的交互瞬间</strong>。如：点击鼠标、 点击按钮、鼠标移动、键盘按下….</p><p>在事件发生时出发的函数叫做事件的相应函数，可以通过指定对象的属性设置响应函数的形式来处理事件</p><h3 id="文档加载"><a class="markdownIt-Anchor" href="#文档加载"></a> 文档加载</h3><p>因为网页中的代码是一行一行的加载的，所以如果讲js代码写在网页的上面，js会优先于网页元素加载，这时就会出现无法获取到dom对象的情况，有一下方式来解决：</p><ul><li>将JS代码写在body的最下面，让所有网页元素加载完后再加载JS代码</li><li>使用<code>window.onload()</code>事件，此事件在网页加载完后才触发，所以将代码写为<code>window.onload()</code>的回调函数也可以解决此问题</li><li>将代码写在外部JS文件里，然后引入JS文件时的script标签上添加defer属性使其延迟加载</li></ul><h2 id="2022730"><a class="markdownIt-Anchor" href="#2022730"></a> 2022.7.30</h2><h3 id="创建dom对象"><a class="markdownIt-Anchor" href="#创建dom对象"></a> 创建DOM对象</h3><blockquote><p>创建：</p><ul><li>方法<code>document.createElement(标签名)</code>:根据标签名创建一个新的元素节点</li><li>方法<code>append()</code>:用于向父节点中添加子节点</li><li>方法<code>cloneNode()</code>:创建当前节点的副本，是一种前复制，传入参数true可以变成深复制（<strong>注意，复制时可能需要修改id</strong>）</li></ul><p>插入：</p><ul><li><p>方法<code>append()</code>:插入在最后面</p></li><li><p>方法<code>insertAdjacentElement(position, element)</code>:positon的值：”beforebegin“（开始之前，即放在此标签之前）、”afterbegin“、”beforeend“、”afterend“</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--beforebegin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--afterbegin--&gt;</span>  </span><br><span class="line">                </span><br><span class="line"><span class="comment">&lt;!--beforeend--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--afterend--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>方法<code>insertAdjacentHTML(position, element)</code>:与上面类似，在指定位置创建HTML代码</p></li><li><p>方法<code>insertAdjacentText(position, element)</code>:同样，在指定位置创建文本内容（上面这几个类似的方法使用不同的元素去调用就可以实现在任何位置插入内容了，但还有其他方法，见下面）</p></li><li><p>方法<code>fatherElement.insertBefore(new element, old element)</code>,使用父元素调用，将新元素放在就元素之前</p></li><li><p>方法<code>fatherElement.replaceChild(new, old)</code>:使用新节点替换旧节点</p></li></ul><p>删除：</p><ul><li>方法<code>fatherElement.removeChild(child)</code>:删除一个子节点（<strong>fatherElement可以直接用child.parentNode找到</strong>）</li><li>方法<code>node.remove()</code>:删除该节点</li></ul><p><strong>除了上面这些方法之外，使用innerHTML直接修改HTML代码也可达到上述目的</strong>。但这样无论是直接赋值还是+=、-=都是整体发生改变的 ，即除了你新加的，原有的也会被替换，可能会有意想不到的后果，所以一般不用</p></blockquote><h2 id="2022731"><a class="markdownIt-Anchor" href="#2022731"></a> 2022.7.31</h2><h3 id="默认行为"><a class="markdownIt-Anchor" href="#默认行为"></a> 默认行为</h3><blockquote><p>超链接在点击后会默认跳转到绑定的页面，如果我们不想要它跳转，我们可以直接修改href为”javascript:“即让它什么也不做，<strong>还可以在单击响应函数最后返回一个false</strong>，这种方式是取消默认行为，所有默认行为都可以这样修改</p><p>除去上面这种方法，我们还可以通过调用事件对象的<code>event.preventDefault()</code>方法来取消默认行为，并且这种方式我们更推荐使用</p></blockquote><h2 id="202283"><a class="markdownIt-Anchor" href="#202283"></a> 2022.8.3</h2><h3 id="操作样式"><a class="markdownIt-Anchor" href="#操作样式"></a> 操作样式</h3><blockquote><p>读取样式</p><ul><li>方法<code>element.getComputedStyle(元素，要获取样式的伪元素)</code>：该方法用于获取元素的当前样式，返回一个存储当前元素所有样式的对象，此方法获取的是当前元素生效的样式</li><li><code>element.getAttribute('属性')</code>，获取我们自定义的属性值（即程序员自己添加的属性）</li><li>属性<code>element.clientHeight/Width</code>获取盒子内容区和内边距的大小，即content+padding，读取的是数字，不包括单位</li><li>属性<code>element.offsetWidth/Height</code>获取盒子可见框的大小，包括border，读取的是数字，不包括单位</li><li>属性<code>element.offsetParent</code>:获取当前元素的定位父元素，定位父元素就是离当前元素最近的开启了定位的祖先元素</li><li><code>element.offsetLeft</code>:获取当前元素相对于其定位元素的左侧偏移量，其他偏移量同理，返回的是数字，不包括单位</li><li><code>element.scrollHeight</code>用来获取元素的滚动区域的大小</li><li><code>element.scrollTop</code>:表示垂直滚动条滚动的距离，可以读，还可以改。<strong>当<code>scrollHeight-scrollTop===clientHeight</code>说明垂直滚动条到底了</strong>，水平滚动条同理</li></ul></blockquote><blockquote><p>修改元素样式</p><ul><li><code>元素.style.样式名=样式值</code><ul><li>样式名中如果有减号<code>-</code>，那不能直接写，要将减号去掉，减号后字符大写，其实就是改为使用小驼峰命名法</li><li>通过style所读取、修改的样式都是内联样式</li></ul></li><li><code>element.setAttribute('属性', '值')</code>：主要用于设置程序员自己定义的自定义属性</li><li><code>element.removeAttribute()</code>：删除某个属性</li></ul></blockquote><h3 id="事件对象"><a class="markdownIt-Anchor" href="#事件对象"></a> 事件对象</h3><p>当事件的响应函数触发时，浏览器都会传递一个对象作为回调函数的实参，这个实参就是事件对象，事件对象中存储了所有当前事件相关的信息，比如事件是谁触发、触发时哪个按键被按下、触发时鼠标的坐标……</p><h3 id="事件冒泡"><a class="markdownIt-Anchor" href="#事件冒泡"></a> 事件冒泡</h3><p><strong>冒泡（bubble）</strong>：冒泡指的是事 件的向上传导，当元素上的某个事件被触发时，其祖先元素上的相同事件也会同时被触发（<strong>注意，冒泡的发生只和结构有关，和元素的位置无关</strong>）</p><p>冒泡在大多数时候都是有利的，简化了开发，但有时我们不希望冒泡</p><p>如果要取消冒泡，需要使用事件对象</p><ul><li>将事件对象的cancelBubble设置为true</li><li>也可以通过事件对象的stopPropagation()方法来停止冒泡</li></ul><h3 id="事件绑定"><a class="markdownIt-Anchor" href="#事件绑定"></a> 事件绑定</h3><p>使用属性来绑定事件时，一个元素上同时只能为一个之间绑定一个响应函数，如果同时为一个事件设置了多个响应函数，则后边的会覆盖掉前边的</p><p>所以我们可以通过<code>evnt.addEventListener(&quot;str&quot;，funtion)</code>为事件绑定多个响应函数，不会互相干扰，执行顺序按照添加顺序执行；需要三个参数：一个字符串，表示要绑定的事件，注意不要on；事件的回调函数；是否在捕获切断触发事件，true表示会在捕获是触发事件，默认是false</p><p>相反的，有<code>event.removeEventListener()</code>用来移出响应事件，移除时传入的参数必须和绑定时一模一样才行，函数也必须是同一个</p><h3 id="事件的传播"><a class="markdownIt-Anchor" href="#事件的传播"></a> 事件的传播</h3><p><strong>事件冒泡</strong>：微软认为，事件应该时由内向外传播，也就是先出发后代元素上的事件，再触发祖先元素的事件</p><p><strong>事件捕获</strong>：  网景认为，事件应该是由外向内传播，也就是先触发祖先元素上的事件，再触发后代元素的事件</p><p>W3C将两种理念相整合，将事件分为了三个阶段：</p><ol><li>事件的捕获：从最外层元素（window）向目标元素进行事件的捕获</li><li>目标元素：事件捕获到目标元素，捕获停止</li><li>事件的冒泡：从目标元素开始，向外层元素进行事件的冒泡，默认情况下，事件是在冒泡阶段开始触发的</li></ol><h2 id="202284"><a class="markdownIt-Anchor" href="#202284"></a> 2022.8.4</h2><h3 id="事件的委派"><a class="markdownIt-Anchor" href="#事件的委派"></a> 事件的委派</h3><p>当需要为多个元素绑定相同的响应函数时，可以统一将事件绑定它们公共的祖先元素，这样只需要绑定一次即可。但为了避免事件被不该触发的对象触发，我们在响应函数里应该判断一下事件由谁触发，这时我们需要使用**<code>event.target</code>**这个属性，它表示的是触发事件（<strong>其实按照冒泡规则来说，应该是触发事件的最底层的对象</strong>）的对象（<strong>为什么不用this</strong>：因为时间的响应函数中，this表示事件绑定的对象），这是我们就可以根据target来判断是谁触发了事件，从而避免让不该触发事件的对象触发事件</p><h2 id="202287"><a class="markdownIt-Anchor" href="#202287"></a> 2022.8.7</h2><h3 id="修改元素class"><a class="markdownIt-Anchor" href="#修改元素class"></a> 修改元素class</h3><p>当需要使用JS修改很多样式时，直接修改很麻烦又不好维护，所以更推荐使用修改class的方式修改样式。</p><blockquote><p>classList：返回当前元素所有的类</p><ul><li><code>elemnt.classList.add()</code>：添加一个或多个类</li><li><code>element.classList.remove()</code>：移出一个类</li><li><code>element.classList.replace(old, new)</code>：替换</li><li><code>element.classList.toggle()</code>：切换一个元素的class，即如果元素拥有该类则删除，没有就加上</li><li><code>element.classList.contains()</code>：检查某个元素是否有某个class</li></ul></blockquote><h3 id="键盘事件"><a class="markdownIt-Anchor" href="#键盘事件"></a> 键盘事件</h3><ul><li><p>keydown：</p><blockquote><p>按着某个按键不松开，按键按下事件会连 续触发，但是第一次和第二次之间的间隔会比较长</p><p><code>event.key</code>：获取按下的按键</p><p><code>event.ctrlKey</code>：检查ctrl是否按下，还有<code>altKey</code>、<code>shiftKey</code></p><p>还可以根据keyCode来判断按下哪个键，keyCode是相应键的ASCII码值</p></blockquote></li><li><p>keyup</p></li><li><p>keypress：</p><blockquote><p>与keydown几乎相同，但像fn、大写锁定之类的键不会触发</p></blockquote></li></ul><p><strong>键盘事件只能绑定给可以获取焦点的元素（input、超链接之类）或document</strong>。</p><h3 id="定时调用"><a class="markdownIt-Anchor" href="#定时调用"></a> 定时调用</h3><p><strong><code>setTimeout()</code></strong>：延时调用</p><blockquote><p>参数：</p><ul><li>回调函数，即要定时调用的那个函数</li><li>时间（毫秒）</li></ul></blockquote><p><strong><code>setInterval()</code></strong>：定时调用</p><blockquote><p>使用与setTimeout()方法一样，但此函数是每个一段时间调用一次，可以用作计时器</p><p>会返回一个类似id的东西（是定时器的标识）</p></blockquote><p><strong><code>clearTimeout()</code></strong>：关闭定时器/延时调用</p><blockquote><p>使用与下面一样</p></blockquote><p><strong><code>clearInterval()</code></strong>：关闭定时器</p><blockquote><p>参数：</p><ul><li>定时器的标识</li></ul></blockquote><p><strong><code>setTimeout()</code>与<code>setInterval</code>可以互相实现，使用<code>setTimeout()</code>加递归可以实现<code>setInterval</code>，使用<code>setInterval</code>只执行一次就是</strong>。</p><h2 id="202289"><a class="markdownIt-Anchor" href="#202289"></a> 2022.8.9</h2><h3 id="bom浏览器对象"><a class="markdownIt-Anchor" href="#bom浏览器对象"></a> BOM(浏览器对象)</h3><blockquote><p>BOM中为我们提供了一组对象，用来完成对浏览器的各种操作</p><ul><li>Window：代表浏览器窗口</li><li>History：代表浏览器的历史记录</li><li>Location：代表浏览器的地址栏</li><li>Navigator：代表浏览器的信息</li><li>Screen：代表设备的屏幕信息</li></ul></blockquote><p><strong>BOM对象都是Window对象的属性，，所以可以直接访问</strong>。</p><ul><li><p>History：</p><blockquote><p>由于隐私的原因，History无法提供具体的历史记录，只能用来浏览器向前向后翻页</p><p><code>history.length</code>：当前访问页面的数量</p><p><code>history.foward()</code>：切换到前边访问的网址</p><p><code>history.backward()</code>：相当于浏览器的回退按钮</p><p><code>history.go(position)</code>：跳转到指定的的历史记录</p></blockquote></li><li><p>Location：</p><blockquote><p>location表示浏览器地址栏信息</p><p>如果读取location，则可以读取到地址栏的信息</p><p>如果修改location的值，则浏览器会自动跳转到新的地址，通过这种方式跳转页面，会留下历史记录，即可以通过回退按钮回来</p><p><code>location.assign()</code>：用来跳转地址，会留下历史记录</p><p><code>location.replace()</code>：用来跳转地址，不会留下历史记录</p><p><code>location.reload()</code>：重新加载，相当于刷新，会有缓存，如果传入参数true就不会有缓存，完全刷新</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208121518129.png" alt="image-20220812151853065" /></p></blockquote></li><li><p>Navigator</p><blockquote><p>代表浏览器的信息，通过Navigator来识别不同的浏览器</p><p>但在Navigator中大部分属性都没什么实际用处了</p><p><code>navigator.userAgent</code>：</p></blockquote></li></ul><h3 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h3><p>[[正则表达式]]</p><blockquote><p>创建正则表达式的对象</p><ul><li><code>let re = new RegExp('正则表达式'，'匹配模式')</code>，</li><li><code>let re2 = /'正则'/'匹配模式'</code>;</li></ul></blockquote><blockquote><p><code>re.test('str')</code>：用来检查一个字符串是否符号正则表达式</p></blockquote><h2 id="2022812"><a class="markdownIt-Anchor" href="#2022812"></a> 2022.8.12</h2><h3 id="同步与异步"><a class="markdownIt-Anchor" href="#同步与异步"></a> 同步与异步</h3><p>同步：一个任务执行完后再执行另外一个任务<br />异步：多线程</p><p>在新标准下，js是可以多线程的</p><h3 id="移动端触屏事件"><a class="markdownIt-Anchor" href="#移动端触屏事件"></a> 移动端触屏事件</h3><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/644/202208121630088.png" alt="image-20220812163043037" /></p><h3 id="本地存储"><a class="markdownIt-Anchor" href="#本地存储"></a> 本地存储</h3><p>随着网页越来越复杂，需要经常在本地存储一些数据</p><blockquote><p>本地存储特性</p><ul><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，sessionStorage约5M，localStorage约20M</li><li>只能存储字符串，可以将对象JSON.stringify()编码后存储</li></ul></blockquote><blockquote><p>sessionStorage：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(key, value);</span><br><span class="line">sessionStorage.<span class="title function_">getItem</span>(key);</span><br><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key);</span><br><span class="line">sessionStorage.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><ul><li>声明周期为关闭浏览器窗口</li><li>在同一个窗口下数据可以共享</li><li>以键值对的方式存储</li></ul></blockquote><blockquote><p>localStorage：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key);</span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>(); </span><br></pre></td></tr></table></figure><ul><li>生命周期永久有效，除非手动删除否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同意浏览器可以共享）</li><li>以键值对的形式存储</li></ul></blockquote><blockquote><p>参考资料：</p><ul><li><a href="https://www.bilibili.com/video/BV1Sy4y1C7ha">B站黑马前端JS</a></li><li><a href="https://www.runoob.com/js/js-tutorial.html">菜鸟教程</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用笔记</title>
      <link href="/archives/ff05b5bf.html"/>
      <url>/archives/ff05b5bf.html</url>
      
        <content type="html"><![CDATA[<h1 id="111"><a class="markdownIt-Anchor" href="#111"></a> 111</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="做点有意义的事"><a class="markdownIt-Anchor" href="#做点有意义的事"></a> 做点有意义的事</h1><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
